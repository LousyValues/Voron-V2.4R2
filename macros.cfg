#####################################################################
#   print_start macro
#####################################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Screw_tilt_adjust if your printer is a Trident
## Quad gantry level if your printer is a V2
## Nevermore - if you have one

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  STATUS_HOMING         # Sets SB-leds to homing-mode
  G28                   # Full home (XYZ)
  G90                   # Absolut position

  ##  Uncomment for bed mesh (1 of 2)
  BED_MESH_CLEAR       # Clears old saved bed mesh (if any)

  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    M106 S255                                           # Turns on the PT-fan

    ##  Uncomment if you have a Nevermore.
    SET_PIN PIN=Nevermore VALUE=1                      # Turns on the Nevermore
    SET_FAN_SPEED FAN=Bed_fans SPEED=1                 # Turns on Bed fans

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Displays info
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    #SET_DISPLAY_TEXT MSG="Soak for 5min"                # Displays info
    #G4 P300000                                          # Waits 5 min for the bedtemp to stabilize
  {% endif %}

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Hotend: 150c"          # Displays info
  M109 S150                                    # Heats the nozzle to 150c
 
  CLEAN_NOZZLE                                 # Cleans nozzle before QGL

  ##  Uncomment for Trident (screw_tilt_adjust)
  #SET_DISPLAY_TEXT MSG="Z-tilt adjust"     # Displays info
  #STATUS_LEVELING                          # Sets SB-leds to leveling-mode
  #Z_TILT_ADJUST                            # Levels the buildplate via z_tilt_adjust
  #G28 Z                                    # Homes Z again after z_tilt_adjust

  ##  Uncomment for V2 (Quad gantry level AKA QGL)
  SET_DISPLAY_TEXT MSG="QGL"      # Displays info
  STATUS_LEVELING                 # Sets SB-leds to leveling-mode
  quad_gantry_level               # Levels the buildplate via QGL
  G28 Z                           # Homes Z again after QGL

  CLEAN_NOZZLE                                 # Cleans nozzle before Auto-Z

  ##  Uncomment for Klicky auto-z
  CALIBRATE_Z                                 # Calibrates Z-offset with klicky
  SET_DISPLAY_TEXT MSG="Z-offset"             # Displays info

  ##  Uncomment for bed mesh (2 of 2)
  SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
  STATUS_MESHING                     # Sets SB-leds to bed mesh-mode
  bed_mesh_calibrate                 # Starts bed mesh

  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
  STATUS_HEATING                                                # Sets SB-leds to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed
  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp

  CLEAN_NOZZLE                                 # Cleans nozzle before Purge

  # Gets ready to print by doing a purge line and updating the SB-leds
  SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
  STATUS_PRINTING                                  # Sets SB-leds to printing-mode
  G0 X{x_wait - 50} Y4 F10000                      # Moves to starting point
  G0 Z0.4                                          # Raises Z to 0.4
  G91                                              # Incremental positioning 
  G1 X100 E20 F1000                                # Purge line
  G90                                              # Absolut position

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script
gcode:
    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    
    #   Check end position to determine safe directions to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}
    
    #  Commence PRINT_END
    M400                             ; wait for buffer to clear
    G92 E0                           ; zero the extruder
    G1 E-4.0 F3600                   ; retract
    G91                              ; relative positioning
    G0 Z{z_safe} F3600               ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000    ; move nozzle to remove stringing
    
    M104 S0                          ; turn off hotend
    M140 S0                          ; turn off bed
    M106 S0                          ; turn off fan
    G90                              ; absolute positioning
    G0 X{max_x / 2} Y{max_y} F3600   ; park nozzle at rear
    #SET_FAN_SPEED FAN=Nevermore SPEED=0
    BED_MESH_CLEAR
    STATUS_PART_READY
    M117 Finished!

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

[gcode_macro CALIBRATE_Z]
rename_existing: BASE_CALIBRATE_Z
gcode:
    {% set bed_position = params.BED_POSITION|default('None') %}
    G28                         # can also be a conditional homing macro
    M117 Z-Calibration..
    ATTACH_PROBE                # a macro for fetching the probe first
    {% if bed_position != 'None' %}
      BASE_CALIBRATE_Z BED_POSITION={bed_position}
    {% else %}
      BASE_CALIBRATE_Z
    {% endif %}
    DETACH_PROBE                # and parking it afterwards (or DOCK_PROBE in klicky macros)
    M117

[gcode_macro _CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

[gcode_macro _CQGL]
gcode:
    {% if printer.quad_gantry_level.applied == False %}
        {% if "xyz" not in printer.toolhead.homed_axes %}
            G28 ; home if not already homed
        {% endif %}
        QUAD_GANTRY_LEVEL
        G28 Z
    {% endif %}

[gcode_macro OFF]
gcode:
    M84                                  ; turn steppers off
    TURN_OFF_HEATERS                     ; turn bed / hotend off
    M107                                 ; turn print cooling fan off
    #SET_FAN_SPEED FAN=Exhaust SPEED=0   ; turn exhaust fan off
    SET_FAN_SPEED FAN=BedFans SPEED=0   ; bed fan off
    SET_PIN PIN=caselight VALUE=0       ; turn case light off

[gcode_macro SHUTDOWN]
gcode:
    OFF                                               ; Shortcut to turn everything off (see above for this macro)
    {action_respond_info('action:poweroff')}          ; OctoPrint compatible host shutdown
	{action_call_remote_method("shutdown_machine")}   ; Moonraker compatible host shutdown

# Park front center
[gcode_macro PARKFRONT]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000        
    RESTORE_GCODE_STATE NAME=PARKFRONT

# Park front center, but low down.
[gcode_macro PARKFRONTLOW]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                              ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKFRONT

# Park at center of build volume
[gcode_macro PARKCENTER]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000    
    RESTORE_GCODE_STATE NAME=PARKCENTER

# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKBED
    G90                                ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro CLEAN_NOZZLE]
variable_start_x: 285
variable_start_y: 300
variable_start_z: 1.0
variable_wipe_dist: -50
variable_wipe_qty: 5
variable_wipe_spd: 200
variable_raise_distance: 30

gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}
 
 G90                                            ; absolute positioning
 ## Move nozzle to start position
 G1 X{start_x} Y{start_y} F6000
 G1 Z{start_z} F1500

 ## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
   G1 X{start_x + wipe_dist} F{wipe_spd * 60}
   G1 X{start_x} F{wipe_spd * 60}
 {% endfor %}

 ## Raise nozzle
 G1 Z{raise_distance}

[gcode_macro HEATSOAK]
gcode:
    # Parameters
    STATUS_HEATING
    {% set t = params.T|default(90)|int %}
    {% set move = params.MOVE|default(1)|int %}
    #UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0  ; cancel off timer (if there is one)
    SET_FAN_SPEED FAN=Nevermore SPEED=1.0              
    M140 S{t}                                       ; heat bed
    {% if t >= 90 %}
    M104 S180                                   ; set hotend to no-ooze temp
    M106 S205                                   ; turn on part fan (80%)
    {% else %}
        M106 S0                                     ; turn part fan off
    {% endif %}
    {% if move == 1 %}
    PARKCENTER                                  ; move to bed
    {% endif %}

[gcode_macro _WAIT_CHAMBER_TEMP]
# This macro is needed to allow klipper populate a new value in the printer[...].temperature variable
# as each variables are populated only once at the beginning of every macro call
gcode:
    {% set chamber_sensor_enabled = printer["gcode_macro _USER_VARIABLES"].chamber_temperature_sensor_enabled %}

    {% if chamber_sensor_enabled %}
        {% set chamber_sensor_name = printer["gcode_macro _USER_VARIABLES"].chamber_temperature_sensor_name %}
        {% set SETPOINT_TEMP = params.TEMP|default(0)|float %}
        {% set CURRENT_TEMP = printer["temperature_sensor " ~ chamber_sensor_name].temperature|float %}

        {% if CURRENT_TEMP <= SETPOINT_TEMP %}
            RESPOND MSG="Heating up the chamber : {CURRENT_TEMP}/{SETPOINT_TEMP}"
            G4 P{60000 * 1} # wait a minute and check again if called in a loop
        {% endif %}
    {% endif %}

    ######################### FILAMENT #########################

[gcode_macro LOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E30 F300                    ; load
   G1 E15 F150                    ; prime nozzle with filament
   M82                            ; set extruder to absolute
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E10 F300                    ; extrude a little to soften tip
   G1 E-100 F1800                  ; retract some, but not too much or it will jam
   M82                            ; set extruder to absolute

[gcode_macro HOT_UNLOAD]
gcode:
    STATUS_BUSY
    # Parameters
    {% set t = params.T|default(245)|int %}
    M104 S{t}
    PARKCENTER
    M109 S{t}
    UNLOAD_FILAMENT
    
[gcode_macro HOT_LOAD]
gcode:
    STATUS_BUSY
    # Parameters
    {% set t = params.T|default(245)|int %}
    M104 S{t}
    PARKCENTER
    M109 S{t}
    LOAD_FILAMENT

[gcode_macro CHANGE_FILAMENT]
description: Do a PAUSE, park the toolhead over the purge bucket and unload the filament
gcode:
    {% set TEMP = params.TEMP|default(printer["gcode_macro _USER_VARIABLES"].print_default_extruder_temp)|float %}

 	SAVE_GCODE_STATE NAME=CHANGE_FILAMENT_state
    PAUSE
    PARK
    UNLOAD_FILAMENT
    RESTORE_GCODE_STATE NAME=CHANGE_FILAMENT_state

[gcode_macro PROBE_CALIBRATE]
rename_existing: _BASE_PROBE_CALIBRATE
description: Calibrate the probe z_offset with klicky automount
gcode:
    {% set probe_min_z_travel = printer["gcode_macro _USER_VARIABLES"].probe_min_z_travel|float %}
    {% set z_drop_speed = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}
    {% set travel_speed = printer["gcode_macro _USER_VARIABLES"].travel_speed %}

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must home axis first!") }
    {% endif %}

    # Go to Z safe distance before saving location in order to
    # avoid crashing the probe on the bed when coming back
    {% if (printer.toolhead.position.z < probe_min_z_travel) %}
        G0 Z{probe_min_z_travel} F{z_drop_speed}
    {% endif %}

    M400 #mandatory if we want to save right position
    _ENTRY_POINT FUNCTION=PROBE_CALIBRATE

    _CHECK_PROBE action=query
    ATTACH_PROBE

    # Restore nozzle location to probe the right place
    _EXIT_POINT FUNCTION=PROBE_CALIBRATE MOVE=1 MOVE_SPEED={travel_speed}

    _BASE_PROBE_CALIBRATE {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
           endfor %}
    
    DOCK_PROBE

    # Restore nozzle location again at the end
    _EXIT_POINT FUNCTION=PROBE_CALIBRATE MOVE=1 MOVE_SPEED={travel_speed}


[gcode_macro PROBE_ACCURACY]
rename_existing: _BASE_PROBE_ACCURACY
description: Probe Z-height accuracy at current XY position with klicky automount
gcode:
    {% set probe_min_z_travel = printer["gcode_macro _USER_VARIABLES"].probe_min_z_travel|float %}
    {% set z_drop_speed = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}
    {% set travel_speed = printer["gcode_macro _USER_VARIABLES"].travel_speed %}

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must home axis first!") }
    {% endif %}

    # Go to Z safe distance before saving location in order to
    # avoid crashing the probe on the bed when coming back
    {% if (printer.toolhead.position.z < probe_min_z_travel) %}
        G0 Z{probe_min_z_travel} F{z_drop_speed}
    {% endif %}

    M400 #mandatory if we want to save right position
    _ENTRY_POINT FUNCTION=PROBE_ACCURACY

    _CHECK_PROBE action=query
    ATTACH_PROBE

    # Restore nozzle location to probe the right place
    _EXIT_POINT FUNCTION=PROBE_ACCURACY MOVE=1 MOVE_SPEED={travel_speed}

    _BASE_PROBE_ACCURACY {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
           endfor %}

    DOCK_PROBE

    # Restore nozzle location again at the end
    _EXIT_POINT FUNCTION=PROBE_ACCURACY MOVE=1 MOVE_SPEED={travel_speed}

[gcode_macro CALIBRATE]
description: Calibrate the printer flow or pressure advance
gcode:
    # Type of calibration
    {% set TYPE = params.TYPE|default("")|string|lower %}
    # Define vars with safe default values for ABS (main material I'm using)
    {% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES"].print_default_bed_temp)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES"].print_default_extruder_temp)|float %}
    {% set MATERIAL = params.MATERIAL|default("ABS")|string %}
    
    {% if TYPE=="flow" %}
        # Call the standard START_PRINT with almost no soaking time and no chamber temp requirement (we want to go fast!)
        # Also no bed mesh needed for this one as it's a small center print
        START_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} MATERIAL={MATERIAL} SOAK=1 SIZE=130_130_170_170
        FLOW_MULTIPLIER_CALIBRATION EXTRUSION_WIDTH=0.471
        END_PRINT FILTER_TIME=0
    
    {% elif TYPE=="pressure_advance" %}
        # Call the standard START_PRINT with almost no soaking time and no chamber temp requirement (we want to go fast!)
        # A bed mesh is needed for this one as it's a large print (120mm sized square)
        START_PRINT EXTRUDER_TEMP={EXTRUDER_TEMP} BED_TEMP={BED_TEMP} MATERIAL={MATERIAL} SOAK=1 SIZE=90_90_210_210
        PRESSURE_ADVANCE_CALIBRATION
        END_PRINT FILTER_TIME=0

    {% else %}
        {action_respond_info("Please call this macro using TYPE= \"flow\" or \"pressure_advance\"")}
        {action_raise_error("not enough parameters to start a calibration!")}
    
    {% endif %}

# Pressure Advance calibration test.

# The main reason for this test is that the standard tuning tower provides ambigious, open to interpretation readings with a broad margin for error.
# This test provides control values next to the values being tested, so differences are easier to notice at a glance.

# Prints a series of bands, 6 lines per each, with the first 3 lines printed slowly and used as baseline/control and the other 3
# at two different speeds in the following sequence: 25% at 40mm/sec, 50% at 120mm/sec, 25% at 40mm/sec.
# Pressure Advance value is being increased for every band starting from 0.01 with 0.002 increments.

# -------------------------------------------------------------------------------------------------------------------------
# If you want to use it into your own config, please install it as a standalone macro as described in the
# installation section of this file: doc > features > pa_calibration.md
# -------------------------------------------------------------------------------------------------------------------------

# The printed model should be inspected by looking at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change).
# Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities.
# Then the pressure advance value is calculated as follows:
#    PA = START + (INCREMENT * band_number)
# Which in case of using default values, would be:
#    PA = 0.01 + (0.002 * band_number)

# You might also want to repeat the test using a START value that is slightly less that your calculated PA value, and smaller INCREMENTs
# to narrow down and refine your PA value further.

# This macro is parametric and most of the values can be adjusted with their respective input parameters.
# It can be called without any input parameters - in which case the default values would be used - or with any combination of parameters as desired. 

# Make sure your axis are homed, your bed mesh is loaded (if you are using one) and both the hotend and the bed are at the temperature required for your filament.
# Usage:
#   PRESSURE_ADVANCE_CALIBRATION START=0.01 INCREMENT=0.002 RAFT=1

# Primary input parameters:
#    START       : default(0.02)   PA value to start with
#    INCREMENT   : default(0.005)  PA value to increment for each subsequent band
#    DO_RAFT     : default(1)      whether to print a raft or not. printing one makes the finished test east to remove from the bed
#    EXTRUSION_MULTIPLIER: default(1.25 if raft enabled, 1.5 if disabled)   extrusion multiplier to apply to printing lines in the band
# Other tunable parameters:
#    PRINT_SIZE    : default(120)    maximum width/height, in mm,  that the test can make use of. the model will be printed in the middle of the bed
#    BANDS_LIMIT   : default(999)    optionally the number of bands can be limited this way. otherwise as many bands that fit in the given SIZE will be printed
#    CONTROL_SPEED : default(30)     speed at which the control lines in a band are printed at, mm/sec
#    OUTER_SPEED   : default(40)     speed of printing the outer parts of the test lines in a band, mm/sec
#    INNER_SPEED   : default(80)     speed of printing the middle part of the test lines in a band, mm/sec
#    TRAVEL_SPEED  : default(200)    speed of travel moves, mm/sec
#    RAFT_SPEED    : default(80)     speed of printing the raft, if enabled, mm/sec
#    LINES_PER_BAND: default(6)    number of lines per band. half of these will be control, another half the test lines
#    RETRACT_LENGTH: default(0.6)  retraction, in mm, to perform when traveling   
#    PURGE_MM      : default(8)    purge this amount of mm of filament before starting the print
#    LINE_SPACING  : default(0.4)  spacing between individual lines in a band

# Play wround with enabling or disabling rafts, changing extrusion multiplier to get thicker lines where Pa changes would be easier to notice, or using
# OUTER and INNER speeds that are more realistic and closer to actual printing conditions: such as the speeds used for external and internal perimeters,
# or internal perimeters and infill. The default values for SLOW and FAST speeds are taken from Stephan's PIF profile for external and internal perimeters.

# @version: 1.2

# Based on the idea from a post by DonStauffer on https://forum.duet3d.com/topic/25161/my-pressure-advance-calibration

[gcode_macro PRESSURE_ADVANCE_CALIBRATION]
description: Calibrate the pressure advance by printing a grid pattern
gcode:
    # 
    # input and tunables
    #
    {% set pa_start     = params.START|default(0.02)|float %}       # starting PA value
    {% set pa_increment = params.INCREMENT|default(0.005)|float %}  # how much to increment PA per band

    {% set do_raft = params.DO_RAFT|default(1)|int %}  # whether to print a raft or not
    
    {% set print_size      = params.PRINT_SIZE|default(120)|int %}                # width/height of the printed test
    {% set num_bands       = params.BANDS_LIMIT|default(999)|int %}               # limit the number of bands to print. othwerwise print as many as would fit within a given size
    {% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}              # number of lines per band. half are control, another half the test
    {% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},  # extrusion multiplier for line print moves
    {% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}          # how much to retract when traveling between print moves
    {% set initial_purge   = params.PURGE_MM|default(8)|int %}                    # mm of filament to purge before printing. set to 0 to disable

    {% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}  # print feedrate of the line in the middle of the band
    {% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}    # print feedrate of the lines on the sides of the band
    {% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}   # print feedrate of the line in the middle of the band
    {% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}  # travel feedrate between print moves
    {% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}    # print feedrate for printing raft
    {% set feedrate_z       = 5 * 60 %}   # z axis travel feedrate
    {% set feedrate_retract = 50 * 60 %}  # retract and deretract feedrate
    
    {% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}  # distance between lines in a band
    {% set spacing_band  = 2 %}                                       # distance between individual bands
    {% set spacing_raft  = 2 %}                                       # distance between raft lines
    
    {% set fast_line_ratio_percent = 50 %}
    # sanity check
    {% set lines_per_band    = [2, lines_per_band]|max %}
    {% set e_multiplier      = [1, e_multiplier]|max %}
    {% set num_lines_control = (lines_per_band / 2)|round(0, 'floor')|int %}
    {% set num_lines_test    = (lines_per_band / 2)|round(0, 'ceil')|int %}
    {% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}  # the higher the extrusion multiplier the wider the spacing
    # computed values
    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}
    {% set nozzle_diameter = printer.configfile.config['extruder'].nozzle_diameter|float %}
    {% set line_width    = nozzle_diameter * 1.25 %}
    {% set line_height   = nozzle_diameter / 2 %}
    {% set z_hop_height  = 2 * line_height %}
    {% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %} 
    {% set spacing_purge = line_height * 0.8 %}  # distance between purge lines and raft
    # set print width to align with the raft grid
    {% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}  # align raft spacing to multiples of line width
    {% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, 'floor')|int %}
    {% set print_width    = num_raft_lines * spacing_raft %}
    # adjust print height to align with the band grid
    {% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}
    {% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, 'floor')|int %}
    {% set num_bands        = [num_bands, bands_per_height]|min %}  
    {% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}
    # adjust slow and fast line lengths to align with raft grid
    {% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}  # ends between raft lines
    {% set fast_line_length = print_width - slow_line_length * 2 %}
    {% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}
    {% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}
    # find start position
    {% set x_start = max_x / 2 - print_width  / 2 %}
    {% set y_start = max_y / 2 - print_height / 2 %}

    {action_respond_info("")}
    {action_respond_info("Starting Pressure Advance calibration print.")}
    {action_respond_info("")}
    {action_respond_info("This operation can not be interrupted by normal means. Hit the \"emergency stop\" button once the print starts exhibiting PA values that are obviously too high.")}
    {action_respond_info("")}
    {action_respond_info("PA of first band: %.4f" % pa_start)}
    {action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}
    {action_respond_info("PA increment per band: %.4f" % pa_increment)}
    {action_respond_info("Number of bands: %d" % num_bands)}
    {action_respond_info("")}
    {action_respond_info("Inspect the printed model. "
      "Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "
      "Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "
      "Your final Pressure Advance value would then be:"
    )}
    {action_respond_info("")}
    {action_respond_info("Assuming that first band_number is 0")}
    {action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}
    {action_respond_info("")}
    {action_respond_info("Update your [extruder] config section and set \"pressure_advance\" to the value you calculated.")}
    {action_respond_info("")}

    # The printed model should be inspected by 
# 
# Then the pressure advance value is calculated as follows:
#    PA = START + (INCREMENT * band_number)
# Which in case of using default values, would be:
#    PA = 0.01 + (0.002 * band_number)
#
   
    SAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
    {% set pa_saved = printer.configfile.settings['extruder'].pressure_advance %}
    SET_PRESSURE_ADVANCE ADVANCE={pa_start}  # start with a given PA
    
    #
    # set extrude_factor to 1 
    #
    M221 S100

    #
    # purging before raft
    #
    M117 Priming
    G90  # absolute coords
    G0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}  # move to start position
    G91  # relative positioning
    G1 E{initial_purge} F{5 * 60}  # extrude at ~12mm3/sec
    G1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}  # print prime line
    G1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}  # move to next line
    G1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}  # print prime line
    
    #
    # print the raft
    #
    {% if do_raft == 1 %}
      G0 F{feedrate_raft} # set print speed
      
      {% for curr_raft_line in range(1, num_raft_lines + 2) %} # rafts need to be on both sides
          # see if we need to print thick raft on slow/fast line boundary
          {% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}
              G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
              G1 X{line_width} E{line_width * e_per_mm}  
              G1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}
              G1 X{line_width} E{line_width * e_per_mm}  
          {% endif %}
          
          G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm} # print the vertical raft line

          # move over to next column
          {% if not loop.last %}
            {% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}
            G1 X{horizontal_move} E{horizontal_move * e_per_mm}  
          {% endif %}
      {% endfor %}

      G1 E-{retract_length} F{feedrate_retract}  # retract
      G0 Z{z_hop_height} F{feedrate_z}           # z-hop
    {% endif %}

    #
    # print the bands
    #
    M117 Printing bands
    G90  # absolute coords
    G0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}  # move to XY start position
    G0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}        # move to Z start position
    G91  # relative positioning
    G1 E{retract_length} F{feedrate_retract}  # unretract

    # print bands
    {% for curr_band_num in range(0, num_bands ) %}
      {% set outer_loop = loop %}

      {% set curr_pa_value = pa_start + curr_band_num * pa_increment %}
      SET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}  # set PA
      M117 Band {curr_band_num} PA {curr_pa_value|round(4)}

      # print control lines
      {% for _ in range(num_lines_control) %}
        G1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control} # print line

        G1 E-{retract_length} F{feedrate_retract}  # retract
        G0 Z{z_hop_height} F{feedrate_z}           # z-hop

        G0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}  # move to start of next line

        G0 Z-{z_hop_height} F{feedrate_z}         # unz-hop
        G1 E{retract_length} F{feedrate_retract}  # unretract
      {% endfor %}

      # print test lines
      {% for _ in range(num_lines_test) %}
        {% for data in [{'mm': slow_line_length, 'f': feedrate_outer}, {'mm': fast_line_length, 'f': feedrate_inner}, {'mm': slow_line_length, 'f': feedrate_outer}] %}
          G1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f} # print line
        {% endfor %}

        G1 E-{retract_length} F{feedrate_retract}  # retract
        G0 Z{z_hop_height} F{feedrate_z}           # z-hop

        {% if not (outer_loop.last and loop.last) %}
          G0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}  # move to start of next line
          G0 Z-{z_hop_height} F{feedrate_z}         # unz-hop
          G1 E{retract_length} F{feedrate_retract}  # unretract
        {% endif %}
      {% endfor %}
    {% endfor %}

    #
    # retract and move away
    #
    G1 E-{retract_length} F{feedrate_retract}  # retract
    G0 Z20 F{feedrate_z}  # up
    G0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}  # center back
    
    M117  # clear the LCD
    SET_PRESSURE_ADVANCE ADVANCE={pa_saved}  # restore original PA
    RESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
	{% set bound = params.BOUND|default(20)|int %}
	# Size for small pattern box
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	# Large pattern
		# Max positions, inset by BOUND
		{% set x_min = printer.toolhead.axis_minimum.x + bound %}
		{% set x_max = printer.toolhead.axis_maximum.x - bound %}
		{% set y_min = printer.toolhead.axis_minimum.y + bound %}
		{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	# Small pattern at center
		# Find X/Y center point
		{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
		{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
		
		# Set small pattern box around center point
		{% set x_center_min = x_center - (smallpatternsize/2) %}
		{% set x_center_max = x_center + (smallpatternsize/2) %}
		{% set y_center_min = y_center - (smallpatternsize/2) %}
		{% set y_center_max = y_center + (smallpatternsize/2) %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Output parameters to g-code terminal
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G90
		G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	{% for i in range(iterations) %}
		# Large pattern
			# Diagonals
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			
			# Box
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
		
		# Small pattern
			# Small diagonals 
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			
			# Small box
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home and get position again for comparison:
		G28
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G90
		G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED    

